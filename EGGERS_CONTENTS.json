{"home":{"content":"# Objects, Dynamic Data\n---\n\nWelcome to lecture 10! Here's a brief class breakdown.\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_4)\nYour class notes for the day.\n\n#### Learning Objectives\n---\n\n1. What are objects? How are they useful in programming?\n2. **(Time permitting)** How can we store and manipulate dynamic data with arrays and objects?\n\n#### To Do Today\n---\n\n#### [Warmup](#warmup)\n#### [Objects](#objects)\n#### [Arrays](#arrays)\n","idx":0},"title":{"content":"Objects, Dynamic Data","idx":1},"desc":{"content":"Dealing with non simple datatypes in javascript","idx":2},"warmup":{"content":"# Warmup\n---\n\nLet's begin with a few exercises.\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_4)\nYour class notes for the day.\n\n#### #TBT\n---\n\nCreate a three column grid using **floats** and **clearfix**.\n\nRemember, the old class notes and the internet are your friends. \n\n**If this takes longer than 5 mins, STOP**.\nMake sure to complete at home and continue practicing your CSS and HTML!\n\n#### [Problem 1](http://samantha.fewd.us/#/fork/mottaquikarim/FEWD_Floats_Ex)\nFor this problem, add the necessary CSS required to make the boxes appear in one line **and** ensure that the text appears **below** the boxes.\n\n#### [Problem 2](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_cols_from_scratch)\nCreate a three column grid from scratch. Here's an **[example](http://fewd.us/howdoi/#/problem/4258)** to help you along.\n\n#### Conditionals\n---\n\nNow to review some if/else conditional logic.\n\n#### [Logic Practice](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_functions_pset_3)\nTry to solve **most** of these.\n\n#### Review\n---\n\n#### [LAST class notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n\nHere's a quick reminder of what we covered last time.\n\n```js\n// boolean operators\n\n// false\nconsole.log( 3 === '3' );\n\n// true; LOL don't ever use...wtf is this\nconsole.log( 3 == '3' ); \n\n// true\nconsole.log( 3 !== '3' );\n\n// false; don't ever use this again \nconsole.log( 3 != '3' ); \n\n// false \nconsole.log( 3 > 3 ); \n\n // true\nconsole.log( 3 >= 3 );\n\n// this evaluates to false, so skip\nif ( 3 === '3' ) { \n    console.log('here')\n}\n\n// evaluates to true\nif ( 3 !== '3' ) { \n    console.log('here2')\n}\n\n// this is \"falsey\", will not run\nif (undefined) {\n    console.log('here?')\n}\n\n// this is \"truthy\", so will run\nif (2) {\n    console.log('here!');\n}\n\n\nconst isItRaining = false;\nconst isItCold = true;\n\n// logical operators\n\n// logical OR\nif (isItCold || isItRaining) {\n    console.log('wear a coat')\n}\n\n// logical AND\nif (isItCold && isItRaining) {\n    console.log('wear a coat AND bring an umbrella');\n}\nelse {\n    console.log('wear regular clothes, yo')\n}\n\n// if else if else block\nconst temp = 62;\n\nif ( temp <= 32  ) {\n    console.log('it is freezing')\n}\nelse if (temp > 32 && temp < 90 ) {\n    console.log('it is normal')\n}\nelse {\n    console.log('you dead');\n}\n```\n\n","idx":3},"objects":{"content":"# Objects\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_4)\nYour class notes for the day.\n<p></p>\n\n#### Exercises\n---\n\n#### [Problems 47-50: Objects](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_9) | [LIVE class notes](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD_629_functions_pset_9)\n<p></o>\n\nObjects in javascript are a way to group variables that are similar to each other thematically.\n\n#### Example\n\nDescribe a `cat` with javascript.\n\nBased on what we know thus far, we can do the following:\n\n```js\nconst catName = 'Annabelle Lee';\nconst catType = 'tabby';\nconst catLimbs = 4;\nconst catAge = 10;\nconst catIsCute = true;\n```\n\nUsing those stored variables, we can reasonably formulate a portrait of a paricular cat.\n\nHowever, what if we needed to describe **two** cats in javascript? What now?\n\nAgain, based on what we know so far, we would be force to do the following:\n\n```js\nconst catName2 = 'Annabelle Lee';\nconst catType2 = 'tabby';\nconst catLimbs2 = 4;\nconst catAge2 = 10;\nconst catIsCute2 = true;\n```\n\n**OR**, we'd have to do the following:\n\n```js\nconst belleFullName = 'Annabelle Lee';\nconst belleType = 'tabby';\nconst belleLimbs = 4;\nconst belleAge = 10;\nconst belleIsCute = true;\n```\n\n**^^^** with both of those strategies, we **could** solve our problem of having described two cats...but the issue still persists - what if we needed 10 cats? What if we had **two cats with the same name**? What if we generically wanted to define a cat through a function?\n\nIn order to solve all of the above usecases, we must now consider a new type of javascript variable, the **object**.\n\nObjects are **everywhere** in javascript **and** have much deeper usecases beyond what was outlined above. In fact, all of javascript itself is **built** on objects.\n\nBefore going further, let us look at how to store objects and manipulate them.\n\n#### Example\nOur previous cat, now as an object:\n\n```js\nconst belle = {\n    type: 'tabby',\n    age: 10,\n    limbs: 4,\n    isCute: true\n};\n```\n\nAnother way to do this:\n\n```js\nconst belle = {};\nbelle.type = 'tabby';\n// ..etc..\n```\n\nA third way to do this:\n\n```js\nconst belle = {};\nbelle['type'] = 'tabby';\n```\n\nReading objects:\n\n```js\nconst belle = {\n    type: 'tabby',\n    age: 10,\n    limbs: 4,\n    isCute: true\n};\n\nconsole.log(belle.type); // tabby\nconsole.log(belle['age']) // 10\n\nconst key = 'limbs';\nconsole.log(belle[key]); // 4\n```","idx":4},"arrays":{"content":"# Arrays\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_4)\nYour class notes for the day.\n<p></p>\n\n#### Exercises\n---\n\n#### [Basic Practice](http://samantha.fewd.us/#fork/mottaquikarim/Arrays_PSET)\n\n#### [Additional Practice](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_8)\n<p></p>\n\nArrays are **objects** that have **numerical** keys. We use them to define and manipulate lists containing **similar** information.\n\nSo for example, we could use an array to keep track of the test scores for every student in a class, since each test score is a number from 0-100. Additionally, arrays are useful to sort information or keep track of stuff positionally (ie: first item more important than second, etc).\n\n**Example**\n\nThree ways to define an array. **[Resource](http://fewd.us/howdoi/#/problem/3561)**\n```js\n// preferred method\nvar arrayEx1 = []; \n\n// not preferred\nvar arrayEx2 = new Array(); \n\n// array with some predefined values\nvar arrayEx3 = [1,2,3,4]; \n``` \n\nYou can read array points like so:\n\n```js\nconsole.log(arrayEx3[0]); // 1\nconsole.log(arrayEx3[2]); // 3\n```\n\nNotice that arrays are **0-index** based, meaning the first item in an array will have an index of 0.\n\n**Define: index** -- this is the **key** of the array, notice how it is numerical.\n\nAn array is an object, so we can access properties with the **[]** notation. **However,** something like this **arrayEx3.0** will not work.\n\n**Length property**\n\nWe can access the length of an array (ie: the number of items inside of it), quite easily with the **.length** property\n```js\nconsole.log(arrayEx3.length); // 4\n```\n\nNote that it says **4**, not **3**. The **last** index of an array is always **1 minus the length** since indices are **0-based**.\n\n**Array Methods**\n\nAdding/removing items to end of array. **[Resource](http://fewd.us/howdoi/#/problem/3566)**\n```js\nvar arr = [\"car\", \"mouse\", \"computer\", 1, \"FEWD\", 50];\narr.pop(); // this will remove the last item in the array called arr\nconsole.log(arr); // this will show us the elements inside of arr after the pop()\n\nvar arr2 = [\"car\", \"mouse\", \"computer\", 1, \"FEWD\", 50];\narr2.push('new item'); // you can push in a new string\narr2.push(27); // you can push in a new number\narr2.push(['new array', 2, 'cat']); // you can even push in another array\nconsole.log(arr2);\n```\n\nAdding/removing items to beginning of array. **[Resource](http://fewd.us/howdoi/#/problem/3567)** \n\n```js\nvar arr1 = ['bike', 'snacks', 'ruby', 10];\narr1.shift(); // this will remove the first item which is bike\nconsole.log(arr1);\n\nvar arr2 = ['bike', 'snacks', 'ruby', 10];\narr2.unshift('games'); // this will add games to the beginning of the array\nconsole.log(arr2);\n```\n\nAdding/removing items anywhere. **[Resource](http://fewd.us/howdoi/#/problem/3568)** \n\n```js\nvar arr1 = ['FEWD', 50, 'JS', 'Array', 'Methods'];\narr1.splice(1, 0, 'add this', 'also add this'); // at index [1] we want to remove none and add the 2 strings\nconsole.log(arr1);\n\nvar arr2 = ['JAVASCRIPT', 2813, 'i<3codes', true, false];\narr2.splice(2, 1); // at index [2] we want to remove one item\nconsole.log(arr2);\n```\n\nLooping. **[Resource](http://fewd.us/howdoi/#/problem/3580)**\n\n```js\n// example using for loop and array:\n\nvar scores = [22, 46 , 99]   // array of scores\n    , arrayLength = scores.length   // items in array\n    , roundNumber = 0   // current round\n    , msg = \" \"        // message\n    , i;              // counter\n    \n// loop through the items in the array\n/*\n    here's how a standard for loop workds\n    for ( initialization; condition; update ) {\n        // note that after every 'initialization'\n        // 'condition' and 'update' we have semicolons\n        // within this for block you would add code\n        // that would get run on every iteration of loop\n    }\n\n*/\nfor ( var i = 0; i < arrayLength; i++ ) {\n    \n    // arrays are zero based so 0 is round 1\n    // add 1 to the current round\n    roundNumber = ( i + 1 );\n    \n    // write the current round to the message\n    msg += 'round' + roundNumber + ': ';\n    \n    // get the score from the scores array\n    msg += scores[i] + \" \";  \n    \n    console.log('=========================');\n    console.log( 'i is: ', i );\n    console.log( 'scores['+i+'] is: ', scores[i] );\n    console.log( 'roundNumber: ', roundNumber );\n    console.log( 'msg: ', msg );\n    console.log('=========================');\n}    \n    \n\n\n\n\n\n```\n\n\n\n","idx":5},"__list__":["home","title","desc","warmup","objects","arrays"]}